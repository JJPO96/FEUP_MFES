class Utils
types
	public string = seq of char;
	public date :: year : nat
				         month: nat1
				 				 day : nat1
				 				 hour : nat
				 				 minute : nat
				 inv d == d.month <= 12 and
								  d.day <= DaysOfMonth(d.year, d.month) and
								  d.hour <= 23 and
								  d.minute <= 59;
	public gender = <Male> | <Female>;
	public clothSize = <XL> | <L> | <M> | <S> | <XS>;
	public clothType = <Shirt> | <Jacket> | <Pants> | <Shoes> | <Hat>;
	public ticketType = <Designer> | <Worker> | <Volunteer> | <Guest> | <Sponsor> | <Attendee>;

operations
-- TODO Define operations here

	public static assertTrue: bool ==> ()
		assertTrue(cond) == return
		pre cond;
		
functions
-- TODO Define functiones here

-- function that checks if e exists in s
	public static existsInSeq[@T](e:@T, s: seq of @T) res: bool ==
		exists t in set elems s & t = e;

-- function that returns the number of days in a month
	public DaysOfMonth(year:nat,month:nat1) res:nat1 ==
		if month in set {1,3,5,7,8,10,12} then 31
		elseif month in set {4,6,9,11} then 30
		elseif IsLeapYear(year) and month = 2 then 29
		else 28;
		
-- function that says if a given year is a leap year or not
	public static IsLeapYear(year: nat1) res : bool ==
		year mod 4 = 0 and year mod 100 <> 0 or 
		year mod 400 = 0;
		
-- checks if d1 is older then d2
	public static isOldestDate(d1:date, d2:date) res : bool ==
		if d1.year <> d2.year then d1.year < d2.year
		else if d1.month <> d2.month then d1.month < d2.month
		else if d1.day <> d2.day then d1.day < d2.day
		else if d1.hour <> d2.hour then d1.hour < d2.hour
		else if d1.minute <> d2.minute then d1.minute < d2.minute
		else false;

-- checks if pair (sd1, ed1) is coincident with (sd2, ed2) are coincident
	public static coincDate(sd1:date, ed1:date, sd2:date, ed2:date) res : bool ==
		if isOldestDate(ed1,sd2) or ed1 = sd2 or isOldestDate(ed2,sd1) or ed2 = sd1 then false
		else true;
		
end Utils