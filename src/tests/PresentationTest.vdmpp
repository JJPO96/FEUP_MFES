class PresentationTest

/*

	Defines the test scenarios and test cases for the Presentation class.
  J. Oliveira, FEUP, MFES, 2017/18.

*/

instance variables
	perTest1:Person := new Person("Test Person1", mk_Utils`date(1996,12,15,16,00), <Male>, <L>, false);
	perTest2:Person := new Person("Test Person2", mk_Utils`date(1991,12,15,16,00), <Female>, <S>, false);
	perTest3:Person := new Person("Test Person3", mk_Utils`date(1986,12,15,16,00), <Male>, <XL>, true);
	orgTest1: seq of (Person) := [perTest1, perTest2, perTest3]; 
	rTest1:Room := new Room("Sala1","Edificio A, Piso 2",50);
	rTest2:Room := new Room("Sala2","Edificio B, Piso 3",5);
	fasTest1:FashionShow  := new FashionShow("1234Show", "MEO Arena", mk_Utils`date(2017,12,15,8,00),  mk_Utils`date(2017,12,20,00,30));
	fasTest2:FashionShow  := new FashionShow("5678Show", "MEO Arena", mk_Utils`date(2017,12,15,8,00),  mk_Utils`date(2017,12,20,00,30));
	pTest:Presentation := new Presentation(fasTest1, [perTest1],rTest1, "NameTest",  mk_Utils`date(2017,12,15,16,00),  mk_Utils`date(2017,12,15,17,30), "testSubject");

operations
	private testPresentation : () ==> ()
		testPresentation() == (
		--test constructor
			Utils`assertTrue(pTest.organizers = [perTest1]);
			Utils`assertTrue(pTest.place = rTest1);
			Utils`assertTrue(pTest.name = "NameTest");
			Utils`assertTrue(pTest.startDate = mk_Utils`date(2017,12,15,16,00));
			Utils`assertTrue(pTest.endDate = mk_Utils`date(2017,12,15,17,30));
			Utils`assertTrue(pTest.subject = "testSubject");
	
		--test setPlace()
			pTest.setPlace(rTest2);
			Utils`assertTrue(pTest.place = rTest2);
		
		--test setName()
			pTest.setName("nameTest1");
			Utils`assertTrue(pTest.name = "nameTest1");
		
		--test setStartDate()
			pTest.setStartDate(mk_Utils`date(2017,12,14,16,00));
			Utils`assertTrue(pTest.startDate = mk_Utils`date(2017,12,14,16,00));
		
		--test setEndDate()
			pTest.setEndDate(mk_Utils`date(2017,12,14,17,00));
			Utils`assertTrue(pTest.endDate = mk_Utils`date(2017,12,14,17,00));
		
		--test addOrganizer()
			--pTest.addOrganizer(perTest1);
			pTest.addOrganizer(perTest2);
			Utils`assertTrue(pTest.organizers = [perTest1, perTest2]);
		
		--test setOrganizers()
			pTest.setOrganizers(orgTest1);
			Utils`assertTrue(pTest.organizers = [perTest1, perTest2, perTest3]);
			
		--test endEvent()
			pTest.place.addOccupant(perTest1);
			pTest.endEvent();
			Utils`assertTrue(pTest.place.occupants = []);
			
		--test setSubject()			
			pTest.setSubject("testSubject1");
			Utils`assertTrue(pTest.subject = "testSubject1");
		);
		
	public static main: () ==> ()
		main() == (
			new PresentationTest().testPresentation();
		);

end PresentationTest