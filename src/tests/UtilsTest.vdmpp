class UtilsTest
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	str : Utils`string;
	dat : Utils`date;
	gen : Utils`string;
	cSize : Utils`string;
	cType : Utils`string;
	tType : Utils`string;
	testSeq : seq of nat := [1,2,3,4,5];
operations
	public testString : () ==> ()
		testString() == (
			str := "Teste";
			Utils`assertTrue(str = "Teste");
		);
			
	public testDate : () ==> ()
		testDate() == (
			str := "Teste";
			Utils`assertTrue(str = "Teste");
			dat := mk_Utils`date(2017,12,29,17,15);
			Utils`assertTrue(dat.year = 2017);
			Utils`assertTrue(dat.month = 12);
			Utils`assertTrue(dat.day = 29);
			Utils`assertTrue(dat.hour = 17);
			Utils`assertTrue(dat.minute = 15);
			
			dat := mk_Utils`date(2017,11,29,17,15);
			Utils`assertTrue(dat.year = 2017);
			Utils`assertTrue(dat.month = 11);
			Utils`assertTrue(dat.day = 29);
			Utils`assertTrue(dat.hour = 17);
			Utils`assertTrue(dat.minute = 15);
			
			dat := mk_Utils`date(2016,2,29,17,15);
			Utils`assertTrue(dat.year = 2016);
			Utils`assertTrue(dat.month = 2);
			Utils`assertTrue(dat.day = 29);
			Utils`assertTrue(dat.hour = 17);
			Utils`assertTrue(dat.minute = 15);
			
			dat := mk_Utils`date(2015,2,28,17,15);
			Utils`assertTrue(dat.year = 2015);
			Utils`assertTrue(dat.month = 2);
			Utils`assertTrue(dat.day = 28);
			Utils`assertTrue(dat.hour = 17);
			Utils`assertTrue(dat.minute = 15);
			
			Utils`assertTrue(not Utils`isOldestDate(mk_Utils`date(2015,2,28,17,15),mk_Utils`date(2015,2,28,17,15)));
			Utils`assertTrue(Utils`isOldestDate(mk_Utils`date(2014,2,28,17,15),mk_Utils`date(2015,2,28,17,15)));
			Utils`assertTrue(Utils`isOldestDate(mk_Utils`date(2015,1,28,17,15),mk_Utils`date(2015,2,28,17,15)));
			Utils`assertTrue(Utils`isOldestDate(mk_Utils`date(2015,2,27,17,15),mk_Utils`date(2015,2,28,17,15)));
			Utils`assertTrue(Utils`isOldestDate(mk_Utils`date(2015,2,28,16,15),mk_Utils`date(2015,2,28,17,15)));
			Utils`assertTrue(Utils`isOldestDate(mk_Utils`date(2015,2,28,17,14),mk_Utils`date(2015,2,28,17,15)));
			
			Utils`assertTrue(Utils`coincDate(mk_Utils`date(2015,2,28,17,14),mk_Utils`date(2015,2,28,17,15),mk_Utils`date(2015,2,28,17,14),mk_Utils`date(2015,2,28,17,15)));
			Utils`assertTrue(not Utils`coincDate(mk_Utils`date(2015,2,28,17,14),mk_Utils`date(2015,2,28,17,15),mk_Utils`date(2015,2,28,17,15),mk_Utils`date(2015,2,28,17,17)));
			Utils`assertTrue(not Utils`coincDate(mk_Utils`date(2015,2,28,17,14),mk_Utils`date(2015,2,28,17,15),mk_Utils`date(2015,2,28,17,16),mk_Utils`date(2015,2,28,17,17)));
			
			Utils`assertTrue(Utils`coincDate(mk_Utils`date(2015,2,28,17,14),mk_Utils`date(2015,2,28,17,15),mk_Utils`date(2015,2,28,17,14),mk_Utils`date(2015,2,28,17,15)));
			Utils`assertTrue(not Utils`coincDate(mk_Utils`date(2015,2,28,17,15),mk_Utils`date(2015,2,28,17,17),mk_Utils`date(2015,2,28,17,14),mk_Utils`date(2015,2,28,17,15)));
			Utils`assertTrue(not Utils`coincDate(mk_Utils`date(2015,2,28,17,16),mk_Utils`date(2015,2,28,17,17),mk_Utils`date(2015,2,28,17,14),mk_Utils`date(2015,2,28,17,15)));
			
		);
		
	public testExistInSeq : () ==> ()
		testExistInSeq() == (
			Utils`assertTrue(Utils`existsInSeq[nat](1,testSeq) = true);
			Utils`assertTrue(Utils`existsInSeq[nat](10,testSeq) = false);
		);	
	public static main: () ==> ()
		main() == (
			new UtilsTest().testString();
			new UtilsTest().testDate();
			new UtilsTest().testExistInSeq();
		);
		
		
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end UtilsTest