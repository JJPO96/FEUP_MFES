class PersonTest
types
-- TODO Define types here
values
instance variables
	pTest :Person := new Person("Test Person", mk_Utils`date(1996,12,15,16,00), <Male>, <L>, false);
	pTest1:Person := new Person("Test Person1", mk_Utils`date(1996,12,15,16,00), <Male>, <L>, false);
	rTest1:Room := new Room("Sala1","Edificio A, Piso 2",50);
	rTest2:Room := new Room("Sala2","Edificio B, Piso 3",5);
	orgTest: seq of (Person) := [pTest1]; 
	fasTest1:FashionShow  := new FashionShow("1234Show", "MEO Arena", mk_Utils`date(2017,12,15,8,00),  mk_Utils`date(2017,12,20,00,30), 500);
	fasTest2:FashionShow  := new FashionShow("5678Show", "MEO Arena", mk_Utils`date(2017,12,15,8,00),  mk_Utils`date(2017,12,20,00,30), 200);
	preTest:Presentation := new Presentation(fasTest1,orgTest,rTest1, "NameTest",  mk_Utils`date(2017,12,15,16,00),  mk_Utils`date(2017,12,15,17,30), "testSubject");
	runTest:RunwayShow := new RunwayShow(fasTest1,orgTest,rTest2, "PreTest",  mk_Utils`date(2017,12,15,18,00),  mk_Utils`date(2017,12,15,19,30), "testTheme");
	ticket1:Ticket := new Ticket(pTest, fasTest1, mk_Utils`date(2017,12,15,8,00),  mk_Utils`date(2017,12,20,00,30), <Worker>);
	ticket2:Ticket := new Ticket(pTest, fasTest2, mk_Utils`date(2017,12,15,8,00),  mk_Utils`date(2017,12,20,00,30), <Worker>);
	
operations
-- TODO Define operations here
	private testPerson : () ==> ()
		testPerson() == (
		--test constructor
			Utils`assertTrue(pTest.name = "Test Person");
		  Utils`assertTrue(pTest.birthdate = mk_Utils`date(1996,12,15,16,00));
			Utils`assertTrue(pTest.gender = <Male>);
			Utils`assertTrue(pTest.clothSize = <L>);
			Utils`assertTrue(pTest.isDesigner = false);
		
		--test setName()
			pTest.setName("Test Person2");
			Utils`assertTrue(pTest.name = "Test Person2");
		
		--test setBirthdate()
			pTest.setBirthdate(mk_Utils`date(1995,12,15,16,00));
			Utils`assertTrue(pTest.birthdate = mk_Utils`date(1995,12,15,16,00));
			
		--test setGender()
			pTest.setGender(<Female>);
			Utils`assertTrue(pTest.gender = <Female>);
			
		--test setClothsize()
			pTest.setClothSize(<XS>);
			Utils`assertTrue(pTest.clothSize = <XS>);
			
		--test addEvent()
			pTest.addEvent(preTest);
			pTest.addEvent(runTest);
			Utils`assertTrue(pTest.eventsAttending = [preTest, runTest]);
			Utils`assertTrue(len pTest.eventsAttending = 2);
			
		--test setIsDesigner
			pTest.setIsDesigner(true);
			Utils`assertTrue(pTest.isDesigner = true);
		
		--test setTicketToShow
			pTest.setTicketToShow({ticket1 |-> fasTest1});
			Utils`assertTrue(pTest.ticketToShow = {ticket1 |-> fasTest1});
			
		--test addTicketShow()
			pTest.addTicketShow(ticket2, fasTest2);
			Utils`assertTrue(pTest.ticketToShow = {ticket1 |-> fasTest1, ticket2 |-> fasTest2});
			
			--pTest.addTicketShow(ticket1, fasTest1);
		);
		
	public static main: () ==> ()
		main() == (
			new PersonTest().testPerson();
		);
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end PersonTest