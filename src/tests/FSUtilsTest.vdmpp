class FSUtilsTest

/*

	Defines the test scenarios and test cases for the FSUtils class.
  J. Oliveira, FEUP, MFES, 2017/18.

*/

instance variables
	str : FSUtils`string;
	dat : FSUtils`date;
	gen : FSUtils`string;
	cSize : FSUtils`string;
	cType : FSUtils`string;
	tType : FSUtils`string;
	testSeq : seq of nat := [1,2,3,4,5];
	
operations
	public testString : () ==> ()
		testString() == (
			str := "Teste";
			FSUtils`assertTrue(str = "Teste");
		);
			
	public testDate : () ==> ()
		testDate() == (
			str := "Teste";
			FSUtils`assertTrue(str = "Teste");
			dat := mk_FSUtils`date(2017,12,29,17,15);
			FSUtils`assertTrue(dat.year = 2017);
			FSUtils`assertTrue(dat.month = 12);
			FSUtils`assertTrue(dat.day = 29);
			FSUtils`assertTrue(dat.hour = 17);
			FSUtils`assertTrue(dat.minute = 15);
			
			dat := mk_FSUtils`date(2017,11,29,17,15);
			FSUtils`assertTrue(dat.year = 2017);
			FSUtils`assertTrue(dat.month = 11);
			FSUtils`assertTrue(dat.day = 29);
			FSUtils`assertTrue(dat.hour = 17);
			FSUtils`assertTrue(dat.minute = 15);
			
			dat := mk_FSUtils`date(2016,2,29,17,15);
			FSUtils`assertTrue(dat.year = 2016);
			FSUtils`assertTrue(dat.month = 2);
			FSUtils`assertTrue(dat.day = 29);
			FSUtils`assertTrue(dat.hour = 17);
			FSUtils`assertTrue(dat.minute = 15);
			
			dat := mk_FSUtils`date(2015,2,28,17,15);
			FSUtils`assertTrue(dat.year = 2015);
			FSUtils`assertTrue(dat.month = 2);
			FSUtils`assertTrue(dat.day = 28);
			FSUtils`assertTrue(dat.hour = 17);
			FSUtils`assertTrue(dat.minute = 15);
			
			FSUtils`assertTrue(not FSUtils`isOldestDate(mk_FSUtils`date(2015,2,28,17,15),mk_FSUtils`date(2015,2,28,17,15)));
			FSUtils`assertTrue(FSUtils`isOldestDate(mk_FSUtils`date(2014,2,28,17,15),mk_FSUtils`date(2015,2,28,17,15)));
			FSUtils`assertTrue(FSUtils`isOldestDate(mk_FSUtils`date(2015,1,28,17,15),mk_FSUtils`date(2015,2,28,17,15)));
			FSUtils`assertTrue(FSUtils`isOldestDate(mk_FSUtils`date(2015,2,27,17,15),mk_FSUtils`date(2015,2,28,17,15)));
			FSUtils`assertTrue(FSUtils`isOldestDate(mk_FSUtils`date(2015,2,28,16,15),mk_FSUtils`date(2015,2,28,17,15)));
			FSUtils`assertTrue(FSUtils`isOldestDate(mk_FSUtils`date(2015,2,28,17,14),mk_FSUtils`date(2015,2,28,17,15)));
			
			FSUtils`assertTrue(FSUtils`coincDate(mk_FSUtils`date(2015,2,28,17,14),mk_FSUtils`date(2015,2,28,17,15),mk_FSUtils`date(2015,2,28,17,14),mk_FSUtils`date(2015,2,28,17,15)));
			FSUtils`assertTrue(not FSUtils`coincDate(mk_FSUtils`date(2015,2,28,17,14),mk_FSUtils`date(2015,2,28,17,15),mk_FSUtils`date(2015,2,28,17,15),mk_FSUtils`date(2015,2,28,17,17)));
			FSUtils`assertTrue(not FSUtils`coincDate(mk_FSUtils`date(2015,2,28,17,14),mk_FSUtils`date(2015,2,28,17,15),mk_FSUtils`date(2015,2,28,17,16),mk_FSUtils`date(2015,2,28,17,17)));
			
			FSUtils`assertTrue(FSUtils`coincDate(mk_FSUtils`date(2015,2,28,17,14),mk_FSUtils`date(2015,2,28,17,15),mk_FSUtils`date(2015,2,28,17,14),mk_FSUtils`date(2015,2,28,17,15)));
			FSUtils`assertTrue(not FSUtils`coincDate(mk_FSUtils`date(2015,2,28,17,15),mk_FSUtils`date(2015,2,28,17,17),mk_FSUtils`date(2015,2,28,17,14),mk_FSUtils`date(2015,2,28,17,15)));
			FSUtils`assertTrue(not FSUtils`coincDate(mk_FSUtils`date(2015,2,28,17,16),mk_FSUtils`date(2015,2,28,17,17),mk_FSUtils`date(2015,2,28,17,14),mk_FSUtils`date(2015,2,28,17,15)));
			
		);
		
	public testExistInSeq : () ==> ()
		testExistInSeq() == (
			FSUtils`assertTrue(FSUtils`existsInSeq[nat](1,testSeq) = true);
			FSUtils`assertTrue(FSUtils`existsInSeq[nat](10,testSeq) = false);
		);	
		
	public static main: () ==> ()
		main() == (
			new FSUtilsTest().testString();
			new FSUtilsTest().testDate();
			new FSUtilsTest().testExistInSeq();
		);

end FSUtilsTest