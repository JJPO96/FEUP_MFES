class Person

/*

	Defines a person that will attend a fashion show.
  J. Oliveira, FEUP, MFES, 2017/18.

*/


instance variables
  public name : Utils`string;
  public birthdate : Utils`date;
  public gender : Utils`gender;
  public clothSize : Utils`clothSize;
  public isDesigner : bool;
  public eventsAttending : seq of (Event);
  public ticketToShow : map Ticket to FashionShow;

operations
-- constructor
	public Person : Utils`string * Utils`date * Utils`gender * Utils`clothSize * bool ==> Person
		Person(n, bD, g, cS, iD) == (
			name := n;
			birthdate := bD;
			gender := g;
			clothSize := cS;
			isDesigner := iD;
			eventsAttending := [];
			ticketToShow := { |-> };
			return self;
		);
		
--set name		
	public setName : Utils`string ==> ()
		setName(n) ==
			name := n;
			
--set birthdate
	public setBirthdate : Utils`date ==> ()
		setBirthdate(bD) ==
			birthdate := bD;
			
--set gender
	public setGender : Utils`gender ==> ()
		setGender(g) ==
			gender := g;
			
-- set cloth size
	public setClothSize : Utils`clothSize ==> ()
		setClothSize(cS)	==
			clothSize := cS;
	
--set is designer
	public setIsDesigner : bool ==> ()
		setIsDesigner(iD) ==
			isDesigner := iD;
			
--add event to eventsAttending
	public addEvent : Event ==> ()
		addEvent(e) == 
			eventsAttending := eventsAttending ^ [e]
			pre not Utils`existsInSeq[Event](e,eventsAttending) and 
			 		not exists te in set elems eventsAttending & Utils`coincDate(te.startDate,te.endDate,e.startDate,e.endDate)
			post eventsAttending = eventsAttending~ ^ [e];
			
--set ticketToShow
	public setTicketToShow : map Ticket to FashionShow ==> ()
		setTicketToShow(e) == 
			ticketToShow := e
			post ticketToShow = e;
			
--add ticket and show to ticketToShow
	public addTicketShow : Ticket * FashionShow ==> ()
		addTicketShow(t,s) == 
			ticketToShow := ticketToShow munion {t |-> s}
			pre not exists tt in set dom ticketToShow & tt.holder = self and (tt = t or ticketToShow(tt) = s)
			post ticketToShow = ticketToShow~ munion {t |-> s};
	
end Person