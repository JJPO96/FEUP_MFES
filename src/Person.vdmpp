class Person

/*

	Defines a person that will attend a fashion show.
  J. Oliveira, FEUP, MFES, 2017/18.

*/


instance variables
  public name : FSUtils`string;
  public birthdate : FSUtils`date;
  public gender : FSUtils`gender;
  public clothSize : FSUtils`clothSize;
  public isDesigner : bool;
  public eventsAttending : seq of (Event);
  public ticketToShow : map Ticket to FashionShow;

operations
-- constructor
	public Person : FSUtils`string * FSUtils`date * FSUtils`gender * FSUtils`clothSize * bool ==> Person
		Person(n, bD, g, cS, iD) == (
			name := n;
			birthdate := bD;
			gender := g;
			clothSize := cS;
			isDesigner := iD;
			eventsAttending := [];
			ticketToShow := { |-> };
			return self;
		);
		
--set name		
	public setName : FSUtils`string ==> ()
		setName(n) ==
			name := n;
			
--set birthdate
	public setBirthdate : FSUtils`date ==> ()
		setBirthdate(bD) ==
			birthdate := bD;
			
--set gender
	public setGender : FSUtils`gender ==> ()
		setGender(g) ==
			gender := g;
			
-- set cloth size
	public setClothSize : FSUtils`clothSize ==> ()
		setClothSize(cS)	==
			clothSize := cS;
	
--set is designer
	public setIsDesigner : bool ==> ()
		setIsDesigner(iD) ==
			isDesigner := iD;
			
--add event to eventsAttending
	public addEvent : Event ==> ()
		addEvent(e) == (
			eventsAttending := eventsAttending ^ [e];
			e.place.addOccupant(self);
			)
			pre not FSUtils`existsInSeq[Event](e,eventsAttending) and 
			 		e.show in set rng ticketToShow and
			 		exists t in set dom ticketToShow & (FSUtils`isOldestDate(ticketToShow(t).startDate, e.startDate) and FSUtils`isOldestDate(e.endDate,ticketToShow(t).endDate)) and
			 		not exists te in set elems eventsAttending & FSUtils`coincDate(te.startDate,te.endDate,e.startDate,e.endDate)
			post eventsAttending = eventsAttending~ ^ [e] and self in set elems e.place.occupants;
			
--set ticketToShow
	public setTicketToShow : map Ticket to FashionShow ==> ()
		setTicketToShow(e) == 
			ticketToShow := e
			post ticketToShow = e;
			
--add ticket and show to ticketToShow
	public addTicketShow : Ticket * FashionShow ==> ()
		addTicketShow(t,s) == 
			ticketToShow := ticketToShow munion {t |-> s}
			pre not exists tt in set dom ticketToShow & tt.holder = self and (tt = t or ticketToShow(tt) = s)
			post ticketToShow = ticketToShow~ munion {t |-> s};
	
end Person